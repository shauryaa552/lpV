import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


data = pd.read_csv('dataset/HousingData.csv')


data.isnull().sum()


plt.figure(figsize=(14, 10))
sns.heatmap(data.corr(), cmap='crest', annot=True)



sns.pairplot(data[['RM', 'DIS', 'LSTAT', 'MEDV']])


X = data[['RM', 'DIS', 'LSTAT']]
y = data['MEDV']


train_x, test_x, train_y, test_y = train_test_split(X, y, test_size=0.2)


scaler = StandardScaler()
train_x_scaled = scaler.fit_transform(train_x)
test_x_scaled = scaler.transform(test_x)


model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Input(shape=(3)))
model.add(tf.keras.layers.Dense(128, activation='relu'))
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(32, activation='relu'))
model.add(tf.keras.layers.Dense(1, activation='linear'))


early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=0.001, patience=3, restore_best_weights=True)


model.compile(optimizer='adam', loss='mse', metrics=['mse'])
model.fit(train_x_scaled, train_y, validation_data=(test_x_scaled, test_y), epochs=100, callbacks=[early_stopping])
